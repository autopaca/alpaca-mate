/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AlpacaAggregatorInterface extends ethers.utils.Interface {
  functions: {
    "allInOne(address,address,uint256[])": FunctionFragment;
    "lpDetail(address)": FunctionFragment;
    "lpsDetail(address[])": FunctionFragment;
    "positionsInfo(address,uint256[])": FunctionFragment;
    "tokenInfos(address[],address)": FunctionFragment;
    "vaultAndWorkerInfo(address,address)": FunctionFragment;
    "workerHelperInfo(address)": FunctionFragment;
    "workerInfo(address)": FunctionFragment;
    "workerKillFactor(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allInOne",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "lpDetail", values: [string]): string;
  encodeFunctionData(functionFragment: "lpsDetail", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "positionsInfo",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfos",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAndWorkerInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "workerHelperInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "workerInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "workerKillFactor",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "allInOne", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpDetail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpsDetail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultAndWorkerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerHelperInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "workerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "workerKillFactor",
    data: BytesLike
  ): Result;

  events: {};
}

export class AlpacaAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AlpacaAggregatorInterface;

  functions: {
    allInOne(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            string,
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            debtToken: string;
            vaultDebtShare: BigNumber;
            vaultDebtVal: BigNumber;
            workerBaseToken: string;
            workerFarmingToken: string;
            workerLpToken: string;
            workerTotalShare: BigNumber;
            workerTotalBalance: BigNumber;
            lpDex: number;
            lpFeeDenom: BigNumber;
            lpFee: BigNumber;
            lpFactory: string;
          },
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string,
            BigNumber
          ] & {
            name: string;
            totalSupply: BigNumber;
            r0: BigNumber;
            r1: BigNumber;
            token0: string;
            token1: string;
            pairFee: BigNumber;
          },
          ([string, string, BigNumber, BigNumber] & {
            worker: string;
            owner: string;
            debtShare: BigNumber;
            lpShare: BigNumber;
          })[]
        ] & {
          vaultAndWorkerInfo: [
            string,
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            debtToken: string;
            vaultDebtShare: BigNumber;
            vaultDebtVal: BigNumber;
            workerBaseToken: string;
            workerFarmingToken: string;
            workerLpToken: string;
            workerTotalShare: BigNumber;
            workerTotalBalance: BigNumber;
            lpDex: number;
            lpFeeDenom: BigNumber;
            lpFee: BigNumber;
            lpFactory: string;
          };
          lpDetail: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string,
            BigNumber
          ] & {
            name: string;
            totalSupply: BigNumber;
            r0: BigNumber;
            r1: BigNumber;
            token0: string;
            token1: string;
            pairFee: BigNumber;
          };
          positions: ([string, string, BigNumber, BigNumber] & {
            worker: string;
            owner: string;
            debtShare: BigNumber;
            lpShare: BigNumber;
          })[];
        }
      ]
    >;

    "allInOne(address,address,uint256[])"(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            string,
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            debtToken: string;
            vaultDebtShare: BigNumber;
            vaultDebtVal: BigNumber;
            workerBaseToken: string;
            workerFarmingToken: string;
            workerLpToken: string;
            workerTotalShare: BigNumber;
            workerTotalBalance: BigNumber;
            lpDex: number;
            lpFeeDenom: BigNumber;
            lpFee: BigNumber;
            lpFactory: string;
          },
          [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string,
            BigNumber
          ] & {
            name: string;
            totalSupply: BigNumber;
            r0: BigNumber;
            r1: BigNumber;
            token0: string;
            token1: string;
            pairFee: BigNumber;
          },
          ([string, string, BigNumber, BigNumber] & {
            worker: string;
            owner: string;
            debtShare: BigNumber;
            lpShare: BigNumber;
          })[]
        ] & {
          vaultAndWorkerInfo: [
            string,
            BigNumber,
            BigNumber,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            debtToken: string;
            vaultDebtShare: BigNumber;
            vaultDebtVal: BigNumber;
            workerBaseToken: string;
            workerFarmingToken: string;
            workerLpToken: string;
            workerTotalShare: BigNumber;
            workerTotalBalance: BigNumber;
            lpDex: number;
            lpFeeDenom: BigNumber;
            lpFee: BigNumber;
            lpFactory: string;
          };
          lpDetail: [
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            string,
            BigNumber
          ] & {
            name: string;
            totalSupply: BigNumber;
            r0: BigNumber;
            r1: BigNumber;
            token0: string;
            token1: string;
            pairFee: BigNumber;
          };
          positions: ([string, string, BigNumber, BigNumber] & {
            worker: string;
            owner: string;
            debtShare: BigNumber;
            lpShare: BigNumber;
          })[];
        }
      ]
    >;

    lpDetail(
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        }
      ]
    >;

    "lpDetail(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        }
      ]
    >;

    lpsDetail(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        })[]
      ]
    >;

    "lpsDetail(address[])"(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        })[]
      ]
    >;

    positionsInfo(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[]
      ]
    >;

    "positionsInfo(address,uint256[])"(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[]
      ]
    >;

    tokenInfos(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, number, BigNumber] & {
          name: string;
          symbol: string;
          decimals: number;
          balance: BigNumber;
        })[]
      ]
    >;

    "tokenInfos(address[],address)"(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, number, BigNumber] & {
          name: string;
          symbol: string;
          decimals: number;
          balance: BigNumber;
        })[]
      ]
    >;

    vaultAndWorkerInfo(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        }
      ]
    >;

    "vaultAndWorkerInfo(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        }
      ]
    >;

    workerHelperInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, BigNumber, string] & {
          totalBalance: BigNumber;
          dex: number;
          feeDenom: BigNumber;
          fee: BigNumber;
          factory: string;
        }
      ]
    >;

    "workerHelperInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, BigNumber, string] & {
          totalBalance: BigNumber;
          dex: number;
          feeDenom: BigNumber;
          fee: BigNumber;
          factory: string;
        }
      ]
    >;

    workerInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          lpToken: string;
          baseToken: string;
          farmingToken: string;
          totalShare: BigNumber;
          totalBalance: BigNumber;
          dex: number;
          feeDenom: BigNumber;
          fee: BigNumber;
          factory: string;
        }
      ]
    >;

    "workerInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          lpToken: string;
          baseToken: string;
          farmingToken: string;
          totalShare: BigNumber;
          totalBalance: BigNumber;
          dex: number;
          feeDenom: BigNumber;
          fee: BigNumber;
          factory: string;
        }
      ]
    >;

    workerKillFactor(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "workerKillFactor(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  allInOne(
    vault: string,
    worker: string,
    positionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      },
      [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      },
      ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[]
    ] & {
      vaultAndWorkerInfo: [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      };
      lpDetail: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      };
      positions: ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[];
    }
  >;

  "allInOne(address,address,uint256[])"(
    vault: string,
    worker: string,
    positionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      },
      [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      },
      ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[]
    ] & {
      vaultAndWorkerInfo: [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      };
      lpDetail: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber
      ] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      };
      positions: ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[];
    }
  >;

  lpDetail(
    lp: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      name: string;
      totalSupply: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      token0: string;
      token1: string;
      pairFee: BigNumber;
    }
  >;

  "lpDetail(address)"(
    lp: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      name: string;
      totalSupply: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      token0: string;
      token1: string;
      pairFee: BigNumber;
    }
  >;

  lpsDetail(
    lps: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      name: string;
      totalSupply: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      token0: string;
      token1: string;
      pairFee: BigNumber;
    })[]
  >;

  "lpsDetail(address[])"(
    lps: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
      name: string;
      totalSupply: BigNumber;
      r0: BigNumber;
      r1: BigNumber;
      token0: string;
      token1: string;
      pairFee: BigNumber;
    })[]
  >;

  positionsInfo(
    vault: string,
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber] & {
      worker: string;
      owner: string;
      debtShare: BigNumber;
      lpShare: BigNumber;
    })[]
  >;

  "positionsInfo(address,uint256[])"(
    vault: string,
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber] & {
      worker: string;
      owner: string;
      debtShare: BigNumber;
      lpShare: BigNumber;
    })[]
  >;

  tokenInfos(
    tokens: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, number, BigNumber] & {
      name: string;
      symbol: string;
      decimals: number;
      balance: BigNumber;
    })[]
  >;

  "tokenInfos(address[],address)"(
    tokens: string[],
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, string, number, BigNumber] & {
      name: string;
      symbol: string;
      decimals: number;
      balance: BigNumber;
    })[]
  >;

  vaultAndWorkerInfo(
    vault: string,
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string
    ] & {
      debtToken: string;
      vaultDebtShare: BigNumber;
      vaultDebtVal: BigNumber;
      workerBaseToken: string;
      workerFarmingToken: string;
      workerLpToken: string;
      workerTotalShare: BigNumber;
      workerTotalBalance: BigNumber;
      lpDex: number;
      lpFeeDenom: BigNumber;
      lpFee: BigNumber;
      lpFactory: string;
    }
  >;

  "vaultAndWorkerInfo(address,address)"(
    vault: string,
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string
    ] & {
      debtToken: string;
      vaultDebtShare: BigNumber;
      vaultDebtVal: BigNumber;
      workerBaseToken: string;
      workerFarmingToken: string;
      workerLpToken: string;
      workerTotalShare: BigNumber;
      workerTotalBalance: BigNumber;
      lpDex: number;
      lpFeeDenom: BigNumber;
      lpFee: BigNumber;
      lpFactory: string;
    }
  >;

  workerHelperInfo(
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, string] & {
      totalBalance: BigNumber;
      dex: number;
      feeDenom: BigNumber;
      fee: BigNumber;
      factory: string;
    }
  >;

  "workerHelperInfo(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, string] & {
      totalBalance: BigNumber;
      dex: number;
      feeDenom: BigNumber;
      fee: BigNumber;
      factory: string;
    }
  >;

  workerInfo(
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string
    ] & {
      lpToken: string;
      baseToken: string;
      farmingToken: string;
      totalShare: BigNumber;
      totalBalance: BigNumber;
      dex: number;
      feeDenom: BigNumber;
      fee: BigNumber;
      factory: string;
    }
  >;

  "workerInfo(address)"(
    worker: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string
    ] & {
      lpToken: string;
      baseToken: string;
      farmingToken: string;
      totalShare: BigNumber;
      totalBalance: BigNumber;
      dex: number;
      feeDenom: BigNumber;
      fee: BigNumber;
      factory: string;
    }
  >;

  workerKillFactor(
    vault: string,
    worker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "workerKillFactor(address,address)"(
    vault: string,
    worker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    allInOne(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        },
        [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        },
        ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[]
      ] & {
        vaultAndWorkerInfo: [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        };
        lpDetail: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        };
        positions: ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[];
      }
    >;

    "allInOne(address,address,uint256[])"(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        },
        [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        },
        ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[]
      ] & {
        vaultAndWorkerInfo: [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          debtToken: string;
          vaultDebtShare: BigNumber;
          vaultDebtVal: BigNumber;
          workerBaseToken: string;
          workerFarmingToken: string;
          workerLpToken: string;
          workerTotalShare: BigNumber;
          workerTotalBalance: BigNumber;
          lpDex: number;
          lpFeeDenom: BigNumber;
          lpFee: BigNumber;
          lpFactory: string;
        };
        lpDetail: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          name: string;
          totalSupply: BigNumber;
          r0: BigNumber;
          r1: BigNumber;
          token0: string;
          token1: string;
          pairFee: BigNumber;
        };
        positions: ([string, string, BigNumber, BigNumber] & {
          worker: string;
          owner: string;
          debtShare: BigNumber;
          lpShare: BigNumber;
        })[];
      }
    >;

    lpDetail(
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      }
    >;

    "lpDetail(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      }
    >;

    lpsDetail(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      })[]
    >;

    "lpsDetail(address[])"(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, string, string, BigNumber] & {
        name: string;
        totalSupply: BigNumber;
        r0: BigNumber;
        r1: BigNumber;
        token0: string;
        token1: string;
        pairFee: BigNumber;
      })[]
    >;

    positionsInfo(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[]
    >;

    "positionsInfo(address,uint256[])"(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber] & {
        worker: string;
        owner: string;
        debtShare: BigNumber;
        lpShare: BigNumber;
      })[]
    >;

    tokenInfos(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, number, BigNumber] & {
        name: string;
        symbol: string;
        decimals: number;
        balance: BigNumber;
      })[]
    >;

    "tokenInfos(address[],address)"(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, string, number, BigNumber] & {
        name: string;
        symbol: string;
        decimals: number;
        balance: BigNumber;
      })[]
    >;

    vaultAndWorkerInfo(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      }
    >;

    "vaultAndWorkerInfo(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        debtToken: string;
        vaultDebtShare: BigNumber;
        vaultDebtVal: BigNumber;
        workerBaseToken: string;
        workerFarmingToken: string;
        workerLpToken: string;
        workerTotalShare: BigNumber;
        workerTotalBalance: BigNumber;
        lpDex: number;
        lpFeeDenom: BigNumber;
        lpFee: BigNumber;
        lpFactory: string;
      }
    >;

    workerHelperInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, string] & {
        totalBalance: BigNumber;
        dex: number;
        feeDenom: BigNumber;
        fee: BigNumber;
        factory: string;
      }
    >;

    "workerHelperInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, string] & {
        totalBalance: BigNumber;
        dex: number;
        feeDenom: BigNumber;
        fee: BigNumber;
        factory: string;
      }
    >;

    workerInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        lpToken: string;
        baseToken: string;
        farmingToken: string;
        totalShare: BigNumber;
        totalBalance: BigNumber;
        dex: number;
        feeDenom: BigNumber;
        fee: BigNumber;
        factory: string;
      }
    >;

    "workerInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string
      ] & {
        lpToken: string;
        baseToken: string;
        farmingToken: string;
        totalShare: BigNumber;
        totalBalance: BigNumber;
        dex: number;
        feeDenom: BigNumber;
        fee: BigNumber;
        factory: string;
      }
    >;

    workerKillFactor(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workerKillFactor(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allInOne(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allInOne(address,address,uint256[])"(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpDetail(lp: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lpDetail(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpsDetail(lps: string[], overrides?: CallOverrides): Promise<BigNumber>;

    "lpsDetail(address[])"(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positionsInfo(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "positionsInfo(address,uint256[])"(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfos(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenInfos(address[],address)"(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultAndWorkerInfo(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultAndWorkerInfo(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerHelperInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workerHelperInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerInfo(worker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "workerInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerKillFactor(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "workerKillFactor(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allInOne(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allInOne(address,address,uint256[])"(
      vault: string,
      worker: string,
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpDetail(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpDetail(address)"(
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpsDetail(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpsDetail(address[])"(
      lps: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionsInfo(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "positionsInfo(address,uint256[])"(
      vault: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfos(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenInfos(address[],address)"(
      tokens: string[],
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultAndWorkerInfo(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultAndWorkerInfo(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerHelperInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerHelperInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerInfo(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerInfo(address)"(
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerKillFactor(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "workerKillFactor(address,address)"(
      vault: string,
      worker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
